/**
 * Expected argument types for OpenAPIClientAxios (adjust based on library documentation and type definitions)
 * Example format: path parameters in `parameters`, body in `data`,
 * query and headers in `config` object
 */
export interface AxiosCallArgs {
  /**
   * Path parameters for the API call
   */
  parameters?: Record<string, any>;
  /**
   * Request body data
   */
  data?: any;
  /**
   * Axios config object containing query parameters and headers
   */
  config?: {
    /**
     * Query parameters for the API call (Axios uses `params` for queries)
     */
    params?: Record<string, any>;
    /**
     * Headers for the API call
     */
    headers?: Record<string, string>;
  };
}

/**
 * Type expected from z.infer of inputSchema
 */
type McpInputArgs = {
  /**
   * Path parameters for the API call
   */
  pathParameters?: Record<string, any>;
  /**
   * Query parameters for the API call
   */
  queryParameters?: Record<string, any>;
  /**
   * Header parameters for the API call
   */
  headerParameters?: Record<string, any>;
  /**
   * Request body data
   */
  requestBody?: any;
};

/**
 * Maps structured MCP args to the format expected by OpenAPIClientAxios method.
 * NOTE: This function focuses on mapping. Authentication headers etc. should be added by the caller.
 * @param args The arguments object generated by LLM based on the structured inputSchema.
 * @returns An object suitable for passing to the OpenAPIClientAxios operation method (adjust based on actual client library needs).
 */
export function mapMcpArgsToAxiosParams(args: McpInputArgs): AxiosCallArgs {
  const { pathParameters, queryParameters, headerParameters, requestBody } =
    args;

  const axiosArgs: AxiosCallArgs = {};

  // 1. Map Path Parameters (often passed as first argument or specific key)
  if (pathParameters && Object.keys(pathParameters).length > 0) {
    axiosArgs.parameters = pathParameters;
  }

  // 2. Map Request Body (often passed as second argument or 'data' key)
  //    null and empty string may have meaning as body, so check for undefined
  if (requestBody !== undefined) {
    axiosArgs.data = requestBody;
  }

  // 3. Map Query Parameters and Header Parameters (often in a config object)
  const config: NonNullable<AxiosCallArgs["config"]> = {};
  let configNeeded = false;

  if (queryParameters && Object.keys(queryParameters).length > 0) {
    config.params = queryParameters; // Axios uses config.params for queries
    configNeeded = true;
  }

  if (headerParameters && Object.keys(headerParameters).length > 0) {
    config.headers = headerParameters; // Mapping function only handles LLM-generated headers
    configNeeded = true;
  }

  if (configNeeded) {
    axiosArgs.config = config;
  }

  return axiosArgs;
}
