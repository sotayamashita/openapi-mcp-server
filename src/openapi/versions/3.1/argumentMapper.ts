/**
 * Expected argument types for OpenAPIClientAxios (adjust based on library documentation and type definitions)
 * Example format: path parameters in `parameters`, body in `data`,
 * query and headers in `config` object
 */
export interface AxiosCallArgs {
  /**
   * Path parameters for the API call (and potentially others based on library)
   */
  parameters?: Record<string, any>;
  /**
   * Request body data
   */
  data?: any;
  /**
   * Axios config object containing query parameters and headers
   */
  config?: {
    /**
     * Query parameters for the API call (Axios uses `params` for queries)
     */
    params?: Record<string, any>;
    /**
     * Headers for the API call
     */
    headers?: Record<string, string>;
    /** Add other Axios config properties if needed */
    [key: string]: any;
  };
  /** Add other top-level properties if needed by the client library */
  [key: string]: any;
}

/**
 * Type expected from z.infer of an inputSchema generated from an OpenAPI 3.1 Operation.
 * Assumes a structure where parameters are grouped by location.
 */
type McpInputArgsV3_1 = {
  /**
   * Path parameters for the API call
   */
  pathParameters?: Record<string, any>;
  /**
   * Query parameters for the API call
   */
  queryParameters?: Record<string, any>;
  /**
   * Header parameters generated by the LLM (excluding auth/fixed headers)
   */
  headerParameters?: Record<string, any>;
  /**
   * Request body data
   */
  requestBody?: any;
  /** Potentially cookie parameters if handled */
  // cookieParameters?: Record<string, any>;
};

/**
 * Maps structured MCP args (derived from an OpenAPI 3.1 operation)
 * to the format expected by an OpenAPIClientAxios operation method.
 * The core mapping logic is similar to OpenAPI 3.0 as parameter locations are consistent.
 * NOTE: This function focuses on structural mapping. Authentication headers, default headers,
 * and other environment-specific configurations should be handled by the caller.
 *
 * @param {McpInputArgsV3_1} args - The arguments object generated by the LLM based on the structured inputSchema derived from an OpenAPI 3.1 operation.
 * @returns {AxiosCallArgs} An object suitable for passing to the OpenAPIClientAxios operation method. The exact structure might need adjustments based on the specific version and usage of your OpenAPIClientAxios library.
 */
export function mapMcpArgsToAxiosParams(args: McpInputArgsV3_1): AxiosCallArgs {
  // Destructure the arguments based on the expected structured inputSchema
  const { pathParameters, queryParameters, headerParameters, requestBody } =
    args;

  // Initialize the object for Axios parameters
  const axiosArgs: AxiosCallArgs = {};

  // 1. Map Path Parameters
  // These might be placed in a top-level 'parameters' object or passed differently
  // depending on the specific OpenAPIClientAxios method signature.
  // This example assumes a 'parameters' object.
  if (pathParameters && Object.keys(pathParameters).length > 0) {
    axiosArgs.parameters = {
      ...(axiosArgs.parameters || {}),
      ...pathParameters,
    };
  }

  // 2. Map Request Body
  // Usually mapped to the 'data' property in Axios config or a specific argument.
  // Check for undefined, as null or empty strings can be valid request bodies.
  if (requestBody !== undefined) {
    axiosArgs.data = requestBody;
  }

  // 3. Map Query Parameters and Header Parameters (often within an Axios config object)
  const config: NonNullable<AxiosCallArgs["config"]> = {};
  let configNeeded = false;

  // Map Query Parameters to `config.params`
  if (queryParameters && Object.keys(queryParameters).length > 0) {
    config.params = queryParameters;
    configNeeded = true;
  }

  // Map LLM-generated Header Parameters to `config.headers`
  // The caller should merge these with auth/default headers later.
  if (headerParameters && Object.keys(headerParameters).length > 0) {
    config.headers = headerParameters;
    configNeeded = true;
  }

  // Add the config object if it contains any parameters or headers
  if (configNeeded) {
    axiosArgs.config = config;
  }

  // Note: Cookie parameters (if parsed into args.cookieParameters) would need
  // specific handling depending on how OpenAPIClientAxios expects them (likely via headers).

  return axiosArgs;
}
